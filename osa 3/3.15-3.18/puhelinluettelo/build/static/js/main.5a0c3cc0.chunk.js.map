{"version":3,"sources":["services/numbersService.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","console","log","delete","put","Person","props","name","number","onClick","messege","window","confirm","numbersService","then","response","setErrorMessage","setTimeout","setPersons","data","length","catch","error","PersonsListForm","filteredPersons","map","person","Filter","value","newFilter","onChange","filterMuuttuu","PersonForm","onSubmit","addNote","newName","nimiMuuttuu","newNumber","numeroMuuttuu","type","Notification","message","className","App","useState","persons","setNewName","setNewNumber","setNewFilter","errorMessage","useEffect","filter","toLocaleLowerCase","includes","toLowerCase","event","target","preventDefault","nimet","yksittainen","lisattavaperson","lisattavanID","haeid","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a0c3cc0.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n//Tämä komponentti vastaa REST kommunikoinnista tietokannankanssa käyttäen AXIOS react lisäosaa\r\n\r\n//palauttaa kaikki tiedot\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\n//luo uuden resurrien tietokantaan\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\n//Päivittää annetun id:n tiedot\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\n//poistaa tiedon\r\nconst remove = (id) => {\r\n    console.log('Poistetaan käyttäjä ID:', id)\r\n    console.log('Osoitteesta', baseUrl, id)\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\n//exportattavat funktiot\r\nexport default { \r\n  getAll: getAll, \r\n  create: create,\r\n  remove: remove,\r\n  update: update \r\n}","import React, { useState, useEffect } from 'react'\nimport numbersService from './services/numbersService'\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n\n  const [newName, setNewName] = useState('')\n\n  const [newNumber, setNewNumber] = useState('')\n\n  const [newFilter, setNewFilter] = useState('')\n\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  //useEffect hakee sovelluksen tiedot JSON muodossa palvelimelta käyttäen numberService luokan axiosia\n  useEffect(() => {\n    console.log('effect alkaa')\n    numbersService\n      .getAll()\n      .then(response => {\n        console.log('effect -> promise fulfilled', response)\n        setPersons(response.data)\n      })\n  }, [])\n  console.log('Dataa löydetty 1:', persons.length, 'kpl')\n\n  //Handler filtterin päivittämistä varten\n  const filterMuuttuu = (event) => {\n    console.log('filtterikenttä muuttuu:', event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  //Handler tekstikentän päivittämistä varten\n  const nimiMuuttuu = (event) => {\n    console.log('tekstikenttä muuttuu:', event.target.value)\n    setNewName(event.target.value)\n\n  }\n\n  //Handler numerokentän päivittämistä varten\n  const numeroMuuttuu = (event) => {\n    console.log('numerokenttä muuttuu:', event.target.value)\n    setNewNumber(event.target.value)\n\n  }\n\n  //Ihmislistan filtteröiminen annetulla filtterillä caseINsensitiivisesti\n  const filteredPersons = persons.filter(person => {\n    return person.name.toLocaleLowerCase().includes(newFilter.toLowerCase())\n  })\n\n  //Handler napin toiminnalle ja nimen lisäämiselle\n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('Saatu sisältö', newName)\n\n    //tämän simppelin rivin naputteluun meni liian kauan\n    //Ottaa kaikki moniulotteisen listan name-tiedot ja tiivistää ne yhteen yksiulotteiseen listaan\n    const nimet = persons.map(yksittainen => yksittainen.name)\n\n    console.log('Nimien listassa nyt:', nimet)\n\n    //uunen henkilön tietojen atribuutit\n    const lisattavaperson = {\n      name: newName,\n      number: newNumber\n    }\n\n    //jos nimi ei ole vielä listassa\n    if (!nimet.includes(newName)) {\n      console.log('Pusketaan listaan seuraavat tiedot severille: ', lisattavaperson)\n\n      //2.15, lähetetään uusi persons-tieto palvelimelle\n      numbersService\n        .create(lisattavaperson)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          console.log('Palvelin vastasi uuteen tietoon:', response)\n          //tyhjennetään kentät\n          setNewName('')\n          setNewNumber('')\n\n          //tulostetaan ilmoitus onnistuneesta lisäyksestä\n          setErrorMessage(\n            `Added ${lisattavaperson.name}`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n      console.log('Listassa nyt: ', persons)\n    }\n\n    //2.18 nimi on jo listassa, tarjotaan mahdollisuutta päivittää se\n    else {\n      //jos ikkunasta klikataan OK, lähetetään numberService komponentille Axionille PUT update käsky\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n\n        //tämän rivin kirjoittamiseen meni liian kauan\n        const lisattavanID = persons.filter(haeid => haeid.name === lisattavaperson.name)\n\n        //päivitetään vanha tieto\n        numbersService\n          .update(lisattavanID[0].id, lisattavaperson)\n          .then(response => {\n            console.log('Palvelin vastasi uuteen tietoon:', response)\n\n            //tyhjennetään kentät\n            setNewName('')\n            setNewNumber('')\n\n            //päivitetään lista muutoksen jälkeen\n            numbersService\n              .getAll()\n              .then(response => {\n                console.log('effect -> promise fulfilled', response)\n                setPersons(response.data)\n              })\n            console.log('Dataa löydetty 3:', persons.length, 'kpl')\n\n            //tulostetaan ilmoitus onnistuneesta tiedon muuttamisesta\n            setErrorMessage(\n              `Updated number for ${lisattavaperson.name}`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      }\n    }\n\n  }\n\n  //varsinaisen rungon tulostus\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter newFilter={newFilter} filterMuuttuu={filterMuuttuu} />\n      <h2>Add a new</h2>\n      <PersonForm addNote={addNote} newName={newName} nimiMuuttuu={nimiMuuttuu} newNumber={newNumber} numeroMuuttuu={numeroMuuttuu} />\n      <h2>Numbers</h2>\n      <PersonsListForm filteredPersons={filteredPersons} setErrorMessage={setErrorMessage} setPersons={setPersons} />\n    </div>\n  )\n}\n\n//Person komponentti. Tulostaa yhden ainoa ihmisen tiedot, sekä poistamiseen käytetty painike\nconst Person = (props) => {\n  return (<p key={props.id}>{props.name} {props.number}\n    <button onClick={() => {\n      const messege = 'Delete ' + props.name\n      console.log(messege)\n      if (window.confirm(messege)) {\n        //jos ikkunasta klikataan OK, lähetetään numberService komponentille Axionille delete käsky\n        console.log('Klikattu poista henkilöön:', props.name, 'jonka ID on', props.id)\n        numbersService\n          .remove(props.id)\n          .then(response => {\n            console.log('Palvelin vastasi uuteen tietoon:', response)\n\n            //tulostetaan ilmoitus tiedon onnistuneesta poistamisesta\n            props.setErrorMessage(\n              `Deleted ${props.name}`\n            )\n            setTimeout(() => {\n              props.setErrorMessage(null)\n            }, 5000)\n\n            //uudelleen ohjaa sivunlataus, jotta lista päivittyy\n            console.log('effect alkaa')\n            numbersService\n              .getAll()\n              .then(response => {\n                console.log('päivitetään', response)\n                props.setPersons(response.data)\n              })\n\n            console.log('Dataa löydetty 2:', response.length, 'kpl')\n          })\n          //\n          .catch(error => {\n            console.log('Virhe poistaessa, tulostetaan virheilmoitus')\n            props.setErrorMessage(\n              `Name and number were already removed from server`\n            )\n            setTimeout(() => {\n              props.setErrorMessage(null)\n            }, 5000)\n          })\n      }\n    }\n\n    }>delete</button></p>)\n}\n\n//Person-komponentin kattokomponentti. Valmistaa kaikki listan henkilöt tulostamista varten\nconst PersonsListForm = (props) => {\n  console.log('Tulostetaan Ihmisten hallintaan käytetty lista', props)\n  return (\n    <div>\n      {props.filteredPersons.map(person =>\n        <Person key={person.id} name={person.name} number={person.number} id={person.id} setErrorMessage={props.setErrorMessage} setPersons={props.setPersons} />\n      )}</div>\n  )\n}\n\n//Filter vastaa filter-kentän ja tekstin tulostamisesta\nconst Filter = (props) => (\n  <div>\n    filter shown with: <input\n      value={props.newFilter}\n      onChange={props.filterMuuttuu}\n    />\n  </div>\n)\n\n//PersonForm vastaa numero ja nimikentän + add-napin tulostamisesta\nconst PersonForm = (props) => (\n  <form onSubmit={props.addNote}>\n    <div>\n      name: <input\n        value={props.newName}\n        onChange={props.nimiMuuttuu}\n      />\n    </div>\n    <div>\n      number: <input\n        value={props.newNumber}\n        onChange={props.numeroMuuttuu}\n      />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\n//Ilmoitusten tulostamiseen käytetty komponentti. Saa parametrinä tulostettavan viestin\nconst Notification = ({ message }) => {\n  //Mikäli viestikentän tulee olla tyhjänä\n  if (message === null) {\n    return null\n  }\n  //Virhetilannetta varten varattu viesti\n  else if (message === `Name and number were already removed from server`) {\n    return (\n      <div className=\"fail\">\n        {message}\n      </div>\n    )\n  }\n\n  //tavallisen ilnmoituksen (poisto, lisäys ja päivitys) tulostaminen\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}